{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectedUserId","changeUserId","useState","searchString","setSearchString","selectValue","setSelectValue","className","type","value","onChange","event","target","name","id","filter","todo","completed","el","title","includes","map","classNames","htmlFor","checked","readOnly","userId","onClick","request","url","fetch","then","response","json","getTodos","CurrentUser","selectingUser","user","setUser","useEffect","getUser","email","phone","App","setSelectedUserId","setTodos","changeId","todoList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.523eee69.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[],\n  selectedUserId: number,\n  changeUserId: (userId: number) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({ todos, selectedUserId, changeUserId }) => {\n  const [searchString, setSearchString] = useState('');\n  const [selectValue, setSelectValue] = useState('all');\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <input\n          type=\"text\"\n          value={searchString}\n          onChange={(event) => {\n            setSearchString(event.target.value);\n          }}\n        />\n\n        <select\n          name=\"select\"\n          id=\"select\"\n          value={selectValue}\n          onChange={event => {\n            setSelectValue(event.target.value);\n          }}\n        >\n          <option value=\"all\">\n            ALL\n          </option>\n          <option value=\"active\">\n            ACTIVE\n          </option>\n          <option\n            value=\"completed\"\n          >\n            COMPLETED\n          </option>\n        </select>\n        <ul className=\"TodoList__list\">\n          {todos\n            .filter(todo => {\n              if (selectValue === 'all') {\n                return true;\n              }\n\n              if (selectValue === 'active') {\n                return (todo.completed === false);\n              }\n\n              return (todo.completed === true);\n            })\n            .filter(el => el.title.includes(searchString))\n            .map(todo => (\n              <>\n                {/* {(todo.userId === selectedUserId) && (\n                  <li\n                    className={classNames('TodoList__item',\n                      {\n                        'TodoList__item--unchecked': !todo.completed,\n                        'TodoList__item--checked': todo.completed,\n                      })}\n                    key={todo.id}\n                  >\n                    <label\n                      htmlFor=\"id\"\n                    >\n                      <input\n                        type=\"checkbox\"\n                        readOnly\n                        id={`${todo.id}`}\n                      />\n                      <p>\n                        {todo.title}\n                      </p>\n                    </label>\n\n                    <button\n                      className={classNames(\n                        'TodoList__user-button',\n                        'button',\n                        {\n                          'TodoList__user-button--selected': todo.userId === selectedUserId,\n                        },\n                      )}\n                      type=\"button\"\n                      onClick={() => {\n                        changeUserId(todo.userId);\n                      }}\n                    >\n                      {todo.userId}\n                    </button>\n                  </li>\n                )} */}\n\n                <li\n                  key={todo.id}\n                  className={classNames('TodoList__item',\n                    {\n                      'TodoList__item--unchecked': !todo.completed,\n                      'TodoList__item--checked': todo.completed,\n                    })}\n                >\n                  <label\n                    htmlFor=\"id\"\n                  >\n                    <input\n                      type=\"checkbox\"\n                      checked={todo.completed}\n                      readOnly\n                    />\n                    <p>\n                      {todo.title}\n                    </p>\n                  </label>\n\n                  <button\n                    className={classNames(\n                      'TodoList__user-button',\n                      'button',\n                      {\n                        'TodoList__user-button--selected': todo.userId === selectedUserId,\n                      },\n                    )}\n                    type=\"button\"\n                    onClick={() => {\n                      changeUserId(todo.userId);\n                    }}\n                  >\n                    {todo.userId}\n                  </button>\n                </li>\n              </>\n            ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\nconst API_URL = 'https://mate.academy/students-api/';\n\nexport function request(url: string) {\n  return fetch(`${API_URL}${url}`)\n    .then(response => response.json());\n}\n\nexport const getTodos = (): Promise<Todo[]> => (\n  request('todos')\n);\n\nexport function getUser(userId: number): Promise<User> {\n  return request(`users/${userId}`);\n}\n","import React, { useState, useEffect } from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ntype Props = {\n  userId: number,\n  selectingUser: (userId: number) => void,\n};\n\nexport const CurrentUser: React.FC<Props> = ({\n  userId,\n  selectingUser,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(userId)\n      .then(response => setUser(response));\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          {userId}\n        </span>\n      </h2>\n      <h3 className=\"CurrentUser__name\">\n        {user?.name}\n      </h3>\n      <p className=\"CurrentUser__email\">\n        {user?.email}\n      </p>\n      <p className=\"CurrentUser__phone\">\n        {user?.phone}\n      </p>\n      <button\n        type=\"button\"\n        onClick={() => {\n          selectingUser(0);\n        }}\n      >\n        CLEAR\n      </button>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const toState = (callback: () => Promise<Todo[]>) => {\n    callback()\n      .then(todoList => setTodos(todoList));\n  };\n\n  const changeId = (userId: number) => {\n    setSelectedUserId(userId);\n  };\n\n  useEffect(() => {\n    toState(getTodos);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          selectedUserId={selectedUserId}\n          changeUserId={changeId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              selectingUser={changeId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}